@using Models;
@using ViewModels.Home;
@model IndexViewModels;

@{
    Layout = "_Layout";
    ViewData["Title"] = "ООП КР | Головна";
}

@section Breadcrumb {
<div class="block-header">
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <ul class="breadcrumb breadcrumb-style ">
                <li class="breadcrumb-item">
                    <h4 class="page-title">Головна</h4>
                </li>
                <li class="breadcrumb-item bcrumb-1">
                    <a href="index.html">
                        <i class="fas fa-home"></i> Домашня</a>
                </li>
                <li class="breadcrumb-item active">Головна</li>
            </ul>
        </div>
    </div>
</div>
}

<!-- Widgets -->
<div class="row">
    <div class="col-lg-3 col-sm-6" data-type="hour-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Вироблено теплової енергії за годину</div>
            <h3 class="m-b-10">@Model.hourGenerate
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="power"></span>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-sm-6" data-type="hour-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Спожито газу за годину</div>
            <h3 class="m-b-10">@Model.hourConsumption
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="gas"></span>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-sm-6" data-type="day-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Вироблено теплової енергії за день</div>
            <h3 class="m-b-10">@Model.dayGenerate
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="power"></span>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-sm-6" data-type="day-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Спожито газу за день</div>
            <h3 class="m-b-10">@Model.dayConsumption
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="gas"></span>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-sm-6" data-type="month-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Вироблено теплової енергії за місяць</div>
            <h3 class="m-b-10">@Model.monthGenerate
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="power"></span>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-sm-6" data-type="month-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Спожито газу за місяць</div>
            <h3 class="m-b-10">@Model.monthConsumption
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="gas"></span>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-sm-6" data-type="all-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Вироблено всього теплової енергії</div>
            <h3 class="m-b-10">@Model.allGenerate
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="power"></span>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-sm-6" data-type="all-data">
        <div class="counter-box text-center white">
            <div class="text font-17 m-b-5">Всого спожито газу</div>
            <h3 class="m-b-10">@Model.allConsumption
                <i class="material-icons col-green">trending_up</i>
            </h3>
            <div class="icon">
                <span class="chart chart-line" data-type="gas"></span>
            </div>
        </div>
    </div>
</div>
<!-- #END# Widgets -->

<!-- Day Report -->
<div class="row">
    <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
        <div class="card">
            <div class="header"><h2><strong>Денний</strong> Звіт</h2></div>

            <div class="body">
                <div class="card">
                    <div class="chart-box-left">
                        <div class="chart-note">
                            <span class="dot dot-product"></span>
                            <span>Вироблено</span>
                        </div>
                        <div class="chart-note mr-0">
                            <span class="dot dot-service"></span>
                            <span>Спожито</span>
                        </div>
                    </div>
                    <!-- Canvas for Chart.js -->
                    <canvas data-type="chart-report-1-day"></canvas>
                    <!-- Custom Axis -->
                    <div class="axisData">
                        @foreach (Hour hour in Model.hours) {
                            <div class="tick">
                                @hour.hour <span class="value productValue">@hour.power</span> <span
                                    class="value serviceValue">@hour.gas</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
        <div class="card">
            <div class="header"><h2><strong>Денний</strong> Звіт</h2></div>

            <div class="body">
                <div class="card">
                    <div class="chart-box-left">
                        <div class="chart-note">
                            <span class="dot dot-product"></span>
                            <span>Вироблено</span>
                        </div>
                        <div class="chart-note mr-0">
                            <span class="dot dot-service"></span>
                            <span>Спожито</span>
                        </div>
                    </div>
                    <!-- Canvas for Chart.js -->
                    <canvas data-type="chart-report-2-day"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- #End Day Report -->

<!-- Month Report -->
<div class="row">
    <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
        <div class="card">
            <div class="header"><h2><strong>Місячний</strong> Звіт</h2></div>

            <div class="body">
                <div class="card">
                    <div class="chart-box-left">
                        <div class="chart-note">
                            <span class="dot dot-product"></span>
                            <span>Вироблено</span>
                        </div>
                        <div class="chart-note mr-0">
                            <span class="dot dot-service"></span>
                            <span>Спожито</span>
                        </div>
                    </div>
                    <!-- Canvas for Chart.js -->
                    <canvas data-type="chart-report-1-month"></canvas>
                    <!-- Custom Axis -->
                    <div class="axisData">
                        <div class="axisData">
                            @foreach (Day day in Model.days) {
                                <div class="tick">
                                    @day.date.Day <span class="value productValue">@day.power</span> <span
                                        class="value serviceValue">@day.gas</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
        <div class="card">
            <div class="header"><h2><strong>Місячний</strong> Звіт</h2></div>

            <div class="body">
                <div class="card">
                    <div class="chart-box-left">
                        <div class="chart-note">
                            <span class="dot dot-product"></span>
                            <span>Вироблено</span>
                        </div>
                        <div class="chart-note mr-0">
                            <span class="dot dot-service"></span>
                            <span>Спожито</span>
                        </div>
                    </div>
                    <!-- Canvas for Chart.js -->
                    <canvas data-type="chart-report-2-month"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- #End Month Report -->

<div class="row clearfix">
    <!-- Task Info -->
    <div class="col-12">
        <div class="card">
            <div class="header">
                <h2>
                    <strong>Об'єкти генерації</strong></h2>
                <ul class="header-dropdown m-r--5">
                    <li class="dropdown">
                        <a href="#" onClick="return false;" class="dropdown-toggle" data-toggle="dropdown"
                            role="button" aria-haspopup="true" aria-expanded="false">
                            <i class="material-icons">more_vert</i>
                        </a>
                        <ul class="dropdown-menu pull-right">
                            <li>
                                <a href="#" onClick="return false;">Action</a>
                            </li>
                            <li>
                                <a href="#" onClick="return false;">Another action</a>
                            </li>
                            <li>
                                <a href="#" onClick="return false;">Something else here</a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="tableBody">
                <div class="table-responsive">
                    <table class="table table-hover dashboard-task-infos">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Назва</th>
                                <th>Адреса</th>
                                <th>Макс. вироб. потужність</th>
                                <th>Макс. спож. потужність</th>
                                <th>Дії</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach(Plant plant in Model.plants){
                                <tr>
                                    <td>@plant.id</td>
                                    <td>@plant.name</td>
                                    <td>@plant.address</td>
                                    <td>@plant.maxGeneratePower</td>
                                    <td>@plant.maxGeneratePower</td>
                                    <td>
                                        <button class="btn tblActnBtn">
                                            <i class="material-icons">mode_edit</i>
                                        </button>
                                        <button class="btn tblActnBtn" onclick="location.href = '/plants/settings/@plant.id'">
                                            <i class="material-icons">settings</i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!-- #END# Task Info -->
</div>

@section PluginsScripts {
    <script src="/assets/js/chart.min.js"></script>
}

@section CustomScripts {
    <script src="/assets/js/pages/charts/jquery-knob.js"></script>
    <script src="/assets/js/pages/sparkline/sparkline-data.js"></script>
    <script src="/assets/js/pages/medias/carousel.js"></script>

    <script>
        function initChartReport1(id, labels, power, gas) {
            let selector = '[data-type="chart-report-1-' + id + '"]',
                canvas = document.querySelector(selector);
            
            var multiply = {
                beforeDatasetsDraw: function (chart, options, el) {
                    chart.ctx.globalCompositeOperation = 'multiply';
                },
                afterDatasetsDraw: function (chart, options) {
                    chart.ctx.globalCompositeOperation = 'source-over';
                },
            };

            // Gradient color - this week
            var gradientThisWeek = canvas.getContext('2d').createLinearGradient(0, 0, 0, 150);
            gradientThisWeek.addColorStop(0, '#5555FF');
            gradientThisWeek.addColorStop(1, '#9787FF');

            // Gradient color - previous week
            var gradientPrevWeek = canvas.getContext('2d').createLinearGradient(0, 0, 0, 150);
            gradientPrevWeek.addColorStop(0, '#FF55B8');
            gradientPrevWeek.addColorStop(1, '#FF8787');

            var config = {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'This week',
                            data: gas,
                            backgroundColor: gradientThisWeek,
                            borderColor: 'transparent',
                            pointBackgroundColor: '#FFFFFF',
                            pointBorderColor: '#FFFFFF',
                            lineTension: 0.40,
                        },
                        {
                            label: 'Previous week',
                            data: power,
                            backgroundColor: gradientPrevWeek,
                            borderColor: 'transparent',
                            pointBackgroundColor: '#FFFFFF',
                            pointBorderColor: '#FFFFFF',
                            lineTension: 0.40,
                        }
                    ]
                },
                options: {
                    elements: {
                        point: {
                            radius: 0,
                            hitRadius: 5,
                            hoverRadius: 5
                        }
                    },
                    legend: {
                        display: false,
                    },
                    scales: {
                        xAxes: [{
                            display: false,
                        }],
                        yAxes: [{
                            display: false,
                            ticks: {
                                beginAtZero: true,
                            },
                        }]
                    }
                },
                plugins: [multiply],
            };

            window.chart = new Chart(canvas, config);
        }
        function initChartReport2(id, labels, power, gas) {
            let selector = '[data-type="chart-report-2-' + id + '"]',
                canvas = document.querySelector(selector);

            var gradientBlue = canvas.getContext('2d').createLinearGradient(0, 0, 0, 150);
            gradientBlue.addColorStop(0, 'rgba(85, 85, 255, 0.9)');
            gradientBlue.addColorStop(1, 'rgba(151, 135, 255, 0.8)');

            var gradientHoverBlue = canvas.getContext('2d').createLinearGradient(0, 0, 0, 150);
            gradientHoverBlue.addColorStop(0, 'rgba(65, 65, 255, 1)');
            gradientHoverBlue.addColorStop(1, 'rgba(131, 125, 255, 1)');

            var gradientRed = canvas.getContext('2d').createLinearGradient(0, 0, 0, 150);
            gradientRed.addColorStop(0, 'rgba(255, 85, 184, 0.9)');
            gradientRed.addColorStop(1, 'rgba(255, 135, 135, 0.8)');

            var gradientHoverRed = canvas.getContext('2d').createLinearGradient(0, 0, 0, 150);
            gradientHoverRed.addColorStop(0, 'rgba(255, 65, 164, 1)');
            gradientHoverRed.addColorStop(1, 'rgba(255, 115, 115, 1)');

            var redArea = null;
            var blueArea = null;

            var shadowed = {
                beforeDatasetsDraw: function (chart, options) {
                    chart.ctx.shadowColor = 'rgba(0, 0, 0, 0.25)';
                    chart.ctx.shadowBlur = 40;
                },
                afterDatasetsDraw: function (chart, options) {
                    chart.ctx.shadowColor = 'rgba(0, 0, 0, 0)';
                    chart.ctx.shadowBlur = 0;
                }
            };


            window.chart = new Chart(document.querySelector(selector), {
                type: "radar",
                data: {
                    labels: labels,
                    datasets: [{
                        label: "Power",
                        data: power,
                        fill: true,
                        backgroundColor: gradientRed,
                        borderColor: 'transparent',
                        pointBackgroundColor: "transparent",
                        pointBorderColor: "transparent",
                        pointHoverBackgroundColor: "transparent",
                        pointHoverBorderColor: "transparent",
                        pointHitRadius: 50,
                    }, {
                        label: "Gas",
                        data: gas,
                        fill: true,
                        backgroundColor: gradientBlue,
                        borderColor: "transparent",
                        pointBackgroundColor: "transparent",
                        pointBorderColor: "transparent",
                        pointHoverBackgroundColor: "transparent",
                        pointHoverBorderColor: "transparent",
                        pointHitRadius: 50,
                    }]
                },
                options: {
                    legend: {
                        display: false,
                    },
                    gridLines: {
                        display: false
                    },
                    scale: {
                        ticks: {
                            maxTicksLimit: 1,
                            display: false,
                        }
                    }
                },
                plugins: [shadowed]
            });

        }
        function initChartReports(id, labels, power, gas) {
            initChartReport1(id, labels, power, gas);
            initChartReport2(id, labels, power, gas);
        }

        const hourPower = @Model.hourGenerate,
            hourGas = @Model.hourConsumption;

        $('[data-type="hour-data"] [data-type="power"].chart.chart-line').sparkline([0, hourPower], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        $('[data-type="hour-data"] [data-type="gas"].chart.chart-line').sparkline([0, hourGas], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        const dayPower = @Model.dayGenerate,
            dayGas = @Model.dayConsumption;

        $('[data-type="day-data"] [data-type="power"].chart.chart-line').sparkline([0, dayPower], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        $('[data-type="day-data"] [data-type="gas"].chart.chart-line').sparkline([0, dayGas], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        const monthPower = @Model.monthGenerate,
            monthGas = @Model.monthConsumption;

        $('[data-type="month-data"] [data-type="power"].chart.chart-line').sparkline([0, monthPower], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        $('[data-type="month-data"] [data-type="gas"].chart.chart-line').sparkline([0, monthGas], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        const allPower = @Model.allGenerate,
            allGas = @Model.allConsumption;

        $('[data-type="all-data"] [data-type="power"].chart.chart-line').sparkline([0, allPower], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        $('[data-type="all-data"] [data-type="gas"].chart.chart-line').sparkline([0, allGas], {
            type: 'line',
            width: '60px',
            height: '45px',
            lineColor: '#65BAF2',
            lineWidth: 2,
            fillColor: 'rgba(0,0,0,0)',
            spotColor: '#F39517',
            maxSpotColor: '#F39517',
            minSpotColor: '#F39517',
            spotRadius: 3,
            highlightSpotColor: '#F44586'
        });

        let hours = JSON.parse('@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.hours))');
        var labels = [], power = [], gas = [];
        
        hours.map((h) => {
            labels.push(h.hour);
            power.push(h.power);
            gas.push(h.gas);
        });
        initChartReports("day", labels, power, gas);

        let days = JSON.parse('@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.days))');
        labels = [], power = [], gas = [];
        
        days.map((d) => {
            labels.push(d.date.split('T')[0].split('-')[2]);
            power.push(d.power);
            gas.push(d.gas);
        });
        initChartReports("month", labels, power, gas);
    </script>
}